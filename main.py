### –ó–¥–µ—Å—å –¢–ì-–±–æ—Ç + –º–æ–¥–µ–ª—å–∫–∞
import os
from dotenv import load_dotenv
import telebot
import sqlite3
import json
import numpy as np
import pandas as pd
from telebot import types
import pickle

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
with open('model.pkl', 'rb') as file:
    model = pickle.load(file)

load_dotenv()
token = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(token)

# /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('/help')
    btn2 = types.KeyboardButton('/params')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id,
f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ {message.from_user.username if message.from_user.username is not None else message.from_user.first_name if message.from_user.first_name is not None else ''} üëã, –∑–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–ª—å—è \
–≤ –≥–æ—Ä–æ–¥–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ üåÜ, –∑–∞–¥–∞–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã \n\n<em>–ß—Ç–æ–±—ã –¥–µ—Ç–∞–ª—å–Ω–µ–π —É–∑–Ω–∞—Ç—å –æ —Ä–∞–±–æ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:</em> <b>/help</b>",
                     parse_mode = 'html',
                     reply_markup=markup)

# /help - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id,
f"–î–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n\
\t1. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å\n\
\t2. –†–∞–π–æ–Ω\n\
\t3. –ú–µ—Ç—Ä–æ\n\
\t4. –£–ª–∏—Ü–∞\n\
\t5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π\n\
\t6. –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞\n\
\t7. –¢–∏–ø –∞–≤—Ç–æ—Ä–∞\n\
\t8. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç\n\
\t9. –û—Ç–¥–µ–ª–∫–∞\n\
\t10. –≠—Ç–∞–∂\n\
\t11. –¢–∏–ø –¥–æ–º–∞\n\n\
<u>p.s. –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞</u>\n\
–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /params",
parse_mode = 'html'
                    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–æ–¥–µ–ª—å
user_parameters = {
    'author_type' : '',
    'floor' : '',
    'floors_count' : '',
    'rooms_count' : '',
    'total_meters' : '',
    'year_of_construction' : '',
    'house_material_type' : '',
    'finish_type' : '',
    'living_meters' : '',
    'kitchen_meters' : '',
    'district' : '',
    'street' : '',
    'underground': '',
}

def create_inline_keyboard(buttons_data):
    """–°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç, callback_data)."""
    markup = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton(text, callback_data=data) for text, data in buttons_data]
    for button in buttons:
        markup.add(button)
    return markup

# Start —Åollecting params
@bot.message_handler(commands=['params'])
def start_collecting_params(message):
    buttons_data = [
        ('–ê–≥–µ–Ω—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', 'real_estate_agent'),
        ('–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', 'homeowner'),
        ('–†–∏–µ–ª—Ç–æ—Ä', 'realtor'),
        ('–£–∫ –æ—Ñ.–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', 'official_representative'),
        ('–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞', 'representative_developer'),
        ('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫', 'developer'),
        ('–ë–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞', 'unknown')
    ]
    markup = create_inline_keyboard(buttons_data)
    bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞:</b>", reply_markup=markup, parse_mode='html')

@bot.callback_query_handler(func=lambda call: True)
def process_inline_buttons(call):
    if not hasattr(call, 'data') or not call.data:
        return

    author_types = ['real_estate_agent', 'homeowner', 'realtor', 'official_representative', 'representative_developer', 'developer', 'unknown']
    construction_years = ['–ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö', '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–°—Ç—Ä–æ–π–∫–∞', '–î–æ–º–∞ –¥–æ 1930-—Ö', '–°—Ça–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞']
    house_materials = [('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'house_material_–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), ('–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π', 'house_material_–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π'),
                       ('–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', 'house_material_–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π'), ('–ü–∞–Ω–µ–ª—å–Ω—ã–π', 'house_material_–ü–∞–Ω–µ–ª—å–Ω—ã–π'),
                       ('–ö–∏—Ä–ø–∏—á–Ω—ã–π', 'house_material_–ö–∏—Ä–ø–∏—á–Ω—ã–π')]
    finish_types = [('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'finish_type_–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), ('–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', 'finish_type_–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏'),
                    ('–ß–∏—Å—Ç–æ–≤–∞—è', 'finish_type_–ß–∏—Å—Ç–æ–≤–∞—è'), ('–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è', 'finish_type_–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è'),
                    ('–ß–µ—Ä–Ω–æ–≤–∞—è', 'finish_type_–ß–µ—Ä–Ω–æ–≤–∞—è')]

    if call.data in author_types:
        user_parameters['author_type'] = call.data
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ (–æ—Ç 1 –¥–æ 30):</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_floor)

    elif call.data in construction_years:
        user_parameters['year_of_construction'] = call.data
        markup_house_material_type = create_inline_keyboard(house_materials)
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞:</b>", reply_markup=markup_house_material_type, parse_mode='html')

    elif call.data.startswith('house_material_'): #and not user_parameters.get('house_material_type')
        user_parameters['house_material_type'] = call.data.split('_', 2)[2]
        markup_finish_type = create_inline_keyboard(finish_types)
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—Ç–¥–µ–ª–∫–∏:</b>", reply_markup=markup_finish_type, parse_mode='html')

    elif call.data.startswith('finish_type_'):
        user_parameters['finish_type'] = call.data.split('_', 2)[2]
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞:</b>\n–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π\n\
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π\n\
–ü—É—à–∫–∏–Ω—Å–∫–∏–π\n\
–í—ã–±–æ—Ä–≥—Å–∫–∏–π\n\
–ù–µ–≤—Å–∫–∏–π\n\
–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π\n\
–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π\n\
–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π\n\
–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π\n\
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π\n\
–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π\n\
–ö—É—Ä–æ—Ä—Ç–Ω—ã–π\n\
–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π\n\
–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π\n\
–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π\n\
–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π\n\
–ö–∏—Ä–æ–≤—Å–∫–∏–π", parse_mode='html')
        bot.register_next_step_handler(msg, process_district)

# Process floor
def process_floor(message):
    try:
        floor = int(message.text)
        if floor < 1 or floor > 30:
            msg = bot.send_message(message.chat.id, "<b>–ö–∞–∫-—Ç–æ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ (–æ—Ç 1 –¥–æ 30):</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_floor)
        else:
            user_parameters['floor'] = floor
            msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 30):</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_floor_count)
    except ValueError:
        msg = bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 30):</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_floor)

# Process floor_count
def process_floor_count(message):
    try:
        floor_cnt = int(message.text)
        if floor_cnt < user_parameters['floor']:
            msg = bot.send_message(message.chat.id, "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –¥–æ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —ç—Ç–∞–∂–∞</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_floor_count)
        elif floor_cnt < 1 or floor_cnt > 30:
            msg = bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 30):</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_floor_count)
        else:
            user_parameters['floors_count'] = floor_cnt
            msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–æ—Ç 0 –¥–æ 5):</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_rooms_count)
    except ValueError:
        msg = bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 30):</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_floor_count)

# Process rooms_count
def process_rooms_count(message):
    try:
        rooms_cnt = int(message.text)
        if rooms_cnt < 0 or rooms_cnt > 5:
            msg = bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–æ—Ç 0 –ª–æ 5):</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_rooms_count)
        else:
            user_parameters['rooms_count'] = rooms_cnt
            msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å:</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_total_meters)
    except ValueError:
        msg = bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 0 –¥–æ 5):</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_rooms_count)

# Process total_meters including kitchen_meters and living_meters
def process_total_meters(message):
    try:
        total_meters = int(message.text)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ rooms_count —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        rooms_count = user_parameters.get('rooms_count')

        valid_ranges = {
            0: (18, 30),
            1: (28, 42),
            2: (40, 90),
            3: (60, 120),
            4: (70, 139),
            5: (80, 179)
        }

        min_meters, max_meters = valid_ranges.get(rooms_count, (0, float('inf')))

        if min_meters <= total_meters <= max_meters:
            user_parameters['total_meters'] = total_meters

            if rooms_count == 0:
                user_parameters['kitchen_meters'] = round(total_meters * 0.15, 2)
                user_parameters['living_meters'] = round(total_meters * 0.65, 2)
            else:
                user_parameters['kitchen_meters'] = round(total_meters * 0.18, 2)
                user_parameters['living_meters'] = round(total_meters * 0.48, 2)

            buttons_data = [
                ('–ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö', '–ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö'),
                ('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'),
                ('–°—Ç—Ä–æ–π–∫–∞', '–°—Ç—Ä–æ–π–∫–∞'),
                ('–î–æ–º–∞ –¥–æ 1930-—Ö', '–î–æ–º–∞ –¥–æ 1930-—Ö'),
                ('–°—Ça–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞', '–°—Ça–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞')
            ]
            markup_period_built = create_inline_keyboard(buttons_data)

            msg = bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞:</b>", reply_markup=markup_period_built, parse_mode='html')

        else:
            msg = bot.send_message(message.chat.id, f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({min_meters} –¥–æ {max_meters} –º¬≤):</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_total_meters)

    except ValueError:
        msg = bot.send_message(message.chat.id, "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å (–≤ –º¬≤):</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_total_meters)

# Process district
def process_district(message):
    try:
        district = message.text.title()
        if district not in ['–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π', '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω—Å–∫–∏–π', '–í—ã–±–æ—Ä–≥—Å–∫–∏–π', '–ù–µ–≤—Å–∫–∏–π',
                            '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π', '–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π',
                            '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π', '–ö—É—Ä–æ—Ä—Ç–Ω—ã–π', '–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π', '–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π',
                            '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π', '–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π']:
            msg = bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–π–æ–Ω:</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_district)
        else:
            user_parameters['district'] = district
            if district == '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 17
            elif district == '–í—ã–±–æ—Ä–≥—Å–∫–∏–π':
                user_parameters['district_rating'] = 16
            elif district == '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π':
                user_parameters['district_rating'] = 15
            elif district == '–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 14
            elif district == '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 13
            elif district == '–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π':
                user_parameters['district_rating'] = 12
            elif district == '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 11
            elif district == '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π':
                user_parameters['district_rating'] = 10
            elif district == '–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π':
                user_parameters['district_rating'] = 9
            elif district == '–ö—É—Ä–æ—Ä—Ç–Ω—ã–π':
                user_parameters['district_rating'] = 8
            elif district == '–ù–µ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 7
            elif district == '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π':
                user_parameters['district_rating'] = 6
            elif district == '–ü—É—à–∫–∏–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 5
            elif district == '–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π':
                user_parameters['district_rating'] = 4
            elif district == '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π':
                user_parameters['district_rating'] = 3
            elif district == '–ö–∏—Ä–æ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 2
            elif district == '–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 1
            msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É:</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_street)
    except ValueError:
        msg = bot.send_message(message.chat.id, "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_district)

# Process street
def process_street(message):
    street = message.text.title()
    user_parameters['street'] = street
    msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–æ:</b>", parse_mode='html')
    bot.register_next_step_handler(msg, process_underground)

metro_stations = {
    "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π": ["–ß–µ—Ä–Ω–∞—è —Ä–µ—á–∫–∞", "–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è", "–°—Ç–∞—Ä–∞—è –î–µ—Ä–µ–≤–Ω—è", "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ë–µ–≥–æ–≤–∞—è"],
    "–í—ã–±–æ—Ä–≥—Å–∫–∏–π": ["–í—ã–±–æ—Ä–≥—Å–∫–∞—è", "–õ–µ—Å–Ω–∞—è", "–£–¥–µ–ª—å–Ω–∞—è", "–û–∑–µ—Ä–∫–∏", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è", "–ü–∞—Ä–Ω–∞—Å"],
    "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π": ["–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞", "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–î–µ–≤—è—Ç–∫–∏–Ω–æ"],
    "–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π": ["–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è", "–õ–∞–¥–æ–∂—Å–∫–∞—è"],
    "–ù–µ–≤—Å–∫–∏–π": ["–ü—Ä–æ—Å–ø–µ–∫—Ç –ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤", "–£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ", "–ï–ª–∏–∑–∞—Ä–æ–≤—Å–∫–∞—è", "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–û–±—É—Ö–æ–≤–æ", "–†—ã–±–∞—Ü–∫–æ–µ"],
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": ["–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ", "–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è", "–ú–∞—è–∫–æ–≤—Å–∫–∞—è", "–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
                           "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è", "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ì–æ—Å—Ç–∏–Ω—ã–π –î–≤–æ—Ä"],
    "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π": ["–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è", "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è", "–ó–µ–Ω–∏—Ç", "–ì–æ—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"],
    "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π": ["–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è", "–°–µ–Ω–Ω–∞—è", "–°–∞–¥–æ–≤–∞—è", "–°–ø–∞—Å—Å–∫–∞—è", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å–∫–∞—è",
                              "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ë–∞–ª—Ç–∏–π—Å–∫–∞—è", "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è"],
    "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π": ["–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è", "–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è", "–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤", "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è"],
    "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π": ["–ö—É–ø—á–∏–Ω–æ", "–í–æ–ª–∫–æ–≤—Å–∫–∞—è", "–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª",
                           "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è", "–ë—É—Ö–∞—Ä–µ—Å—Ç—Å–∫–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –°–ª–∞–≤—ã", "–î—É–Ω–∞–π—Å–∫–∞—è"],
    "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π": ["–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ—Å–∏–ª–∞",
                         "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ó–≤—ë–∑–¥–Ω–∞—è"],
    "–ö–∏—Ä–æ–≤—Å–∫–∏–π": ["–ù–∞—Ä–≤—Å–∫–∞—è", "–ö–∏—Ä–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥", "–ê–≤—Ç–æ–≤–æ",
                        "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"],
    "–ü—É—à–∫–∏–Ω—Å–∫–∏–π" : ["–®—É—à–∞—Ä—ã"],
    "–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π" : ["–†—ã–±–∞—Ü–∫–æ–µ", "–ó–≤—ë–∑–¥–Ω–∞—è"],
    "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π" : ["–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"],
    "–ö—É—Ä–æ—Ä—Ç–Ω—ã–π" : ["–ë–µ–≥–æ–≤–∞—è"],
    "–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π" : ["–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤", "–ê–≤—Ç–æ–≤–æ"]
}

# Process underground
def process_underground(message):
    try:
        district = user_parameters['district']
        underground = message.text
        allowed_stations = metro_stations[district]

        if underground in allowed_stations:
            user_parameters['underground'] = underground
            msg = bot.send_message(message.chat.id, "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Ä–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å!</b>\n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /predict", parse_mode='html')
            save_parameters()
        else:
            msg = bot.send_message(message.chat.id, f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞: {', '.join(allowed_stations)}</b>", parse_mode='html')
            bot.register_next_step_handler(msg, process_underground)

    except ValueError:
        msg = bot.send_message(message.chat.id, "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_underground)

@bot.message_handler(commands=['predict'])
def prediction(message):
    try:
        user_parameters = load_user_parameters()
        input_data = pd.DataFrame(user_parameters, index=[0])
        predicted_price = np.exp(model.predict(input_data))
        lower_border = round(predicted_price[0] - (predicted_price[0] * 5 / 100))
        upper_border = round(predicted_price[0] + (predicted_price[0] * 5 / 100))
        formatted_lower_border = "{:,}".format(lower_border).replace(",", ".")
        formatted_upper_border = "{:,}".format(upper_border).replace(",", ".")
        markup = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –¶–∏–∞–Ω", url=generate_cian_url(user_parameters))
        markup.add(url_button)
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç <b>{formatted_lower_border}‚ÇΩ</b> –¥–æ <b>{formatted_upper_border}‚ÇΩ</b>", parse_mode='html', reply_markup=markup)
    except:
        msg = bot.send_message(message.chat.id, "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_inline_buttons)

def save_parameters():
    conn = sqlite3.connect('/app/data/user_parameters.db')
    c = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    c.execute('''CREATE TABLE IF NOT EXISTS user_parameters
                 (parameters TEXT)''')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ JSON-—Å—Ç—Ä–æ–∫—É
    params_json = json.dumps(user_parameters)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    c.execute("DELETE FROM user_parameters")

    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    c.execute("INSERT INTO user_parameters (parameters) VALUES (?)", (params_json,))
    conn.commit()
    conn.close()

def load_user_parameters():
    conn = sqlite3.connect('/app/data/user_parameters.db')
    c = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    c.execute("SELECT parameters FROM user_parameters")
    result = c.fetchone()

    if result:
        params_json = result[0]
        parameters = json.loads(params_json)
    else:
        parameters = user_parameters

    conn.close()
    return parameters

subways = {
    '–ë–µ–≥–æ–≤–∞—è' : 'metro%5B0%5D=355',
    '–ó–µ–Ω–∏—Ç' : 'metro%5B0%5D=356',
    '–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è' : 'metro%5B0%5D=204',
    '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=205',
    '–ì–æ—Å—Ç–∏–Ω—ã–π –¥–≤–æ—Ä' : 'metro%5B0%5D=206',
    '–ú–∞—è–∫–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=207',
    '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ' : 'metro%5B0%5D=208',
    '–ï–ª–∏–∑–∞—Ä–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=210',
    '–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=211',
    '–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è' : 'metro%5B0%5D=212',
    '–û–±—É—Ö–æ–≤–æ' : 'metro%5B0%5D=213',
    '–†—ã–±–∞—Ü–∫–æ–µ' : 'metro%5B0%5D=214',
    '–î–µ–≤—è—Ç–∫–∏–Ω–æ' : 'metro%5B0%5D=167',
    '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç' : 'metro%5B0%5D=168',
    '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è' : 'metro%5B0%5D=169',
    '–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è' : 'metro%5B0%5D=170',
    '–ü–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞' : 'metro%5B0%5D=171',
    '–õ–µ—Å–Ω–∞—è' : 'metro%5B0%5D=172',
    '–í—ã–±–æ—Ä–≥—Å–∫–∞—è' : 'metro%5B0%5D=173',
    '–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞' : 'metro%5B0%5D=174',
    '–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è' : 'metro%5B0%5D=175',
    '–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è' : 'metro%5B0%5D=176',
    '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è' : 'metro%5B0%5D=177',
    '–ü—É—à–∫–∏–Ω—Å–∫–∞—è' : 'metro%5B0%5D=178',
    '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç' : 'metro%5B0%5D=179',
    '–ë–∞–ª—Ç–∏–π—Å–∫–∞—è' : 'metro%5B0%5D=180',
    '–ù–∞—Ä–≤—Å–∫–∞—è' : 'metro%5B0%5D=181',
    '–ö–∏—Ä–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥' : 'metro%5B0%5D=182',
    '–ê–≤—Ç–æ–≤–æ' : 'metro%5B0%5D=183',
    '–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç' : 'metro%5B0%5D=184',
    '–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤' : 'metro%5B0%5D=185',
    '–ü–∞—Ä–Ω–∞—Å' : 'metro%5B0%5D=186',
    '–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è' : 'metro%5B0%5D=187',
    '–û–∑–µ—Ä–∫–∏' : 'metro%5B0%5D=188',
    '–£–¥–µ–ª—å–Ω–∞—è' : 'metro%5B0%5D=189',
    '–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è' : 'metro%5B0%5D=190',
    '–ß—ë—Ä–Ω–∞—è —Ä–µ—á–∫–∞' : 'metro%5B0%5D=191',
    '–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è' : 'metro%5B0%5D=192',
    '–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=193',
    '–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç ' : 'metro%5B0%5D=194',
    '–°–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å' : 'metro%5B0%5D=195',
    '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è' : 'metro%5B0%5D=197',
    '–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞' : 'metro%5B0%5D=198',
    '–≠–ª–µ–∫—Ç—Ä–æ—Å–∏–ª–∞' : 'metro%5B0%5D=199',
    '–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã' : 'metro%5B0%5D=200',
    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=201',
    '–ó–≤—ë–∑–¥–Ω–∞—è' : 'metro%5B0%5D=202',
    '–ö—É–ø—á–∏–Ω–æ' : 'metro%5B0%5D=203',
    '–ì–æ—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç' : 'metro%5B0%5D=382',
    '–°–ø–∞—Å—Å–∫–∞—è' : 'metro%5B0%5D=232',
    '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è' : 'metro%5B0%5D=221',
    '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç' : 'metro%5B0%5D=222',
    '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è' : 'metro%5B0%5D=224',
    '–õ–∞–¥–æ–∂—Å–∫–∞—è' : 'metro%5B0%5D=225',
    '–ü—Ä–æ—Å–ø–µ–∫—Ç –ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤' : 'metro%5B0%5D=226',
    '–£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ' : 'metro%5B0%5D=227',
    '–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç' : 'metro%5B0%5D=215',
    '–°—Ç–∞—Ä–∞—è –î–µ—Ä–µ–≤–Ω—è' : 'metro%5B0%5D=216',
    '–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤' : 'metro%5B0%5D=217',
    '–ß–∫–∞–ª–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=218',
    '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è' : 'metro%5B0%5D=219',
    '–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è' : 'metro%5B0%5D=242',
    '–°–∞–¥–æ–≤–∞—è' : 'metro%5B0%5D=220',
    '–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å–∫–∞—è' : 'metro%5B0%5D=231',
    '–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª' : 'metro%5B0%5D=241',
    '–í–æ–ª–∫–æ–≤—Å–∫–∞—è' : 'metro%5B0%5D=230',
    '–ë—É—Ö–∞—Ä–µ—Å—Ç—Å–∫–∞—è' : 'metro%5B0%5D=247',
    '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è' : 'metro%5B0%5D=246',
    '–ü—Ä–æ—Å–ø–µ–∫—Ç –°–ª–∞–≤—ã' : 'metro%5B0%5D=357',
    '–î—É–Ω–∞–π—Å–∫–∞—è' : 'metro%5B0%5D=358',
    '–®—É—à–∞—Ä—ã' : 'metro%5B0%5D=359'
}

def generate_cian_url(user_parameters):
    base_url = 'https://spb.cian.ru/cat.php?deal_type=sale'
    total_area = f'&maxtarea={round(user_parameters["total_meters"])}'
    underground = f'&{subways[user_parameters["underground"]]}'
    floors_count = f'&maxfloorn={user_parameters["floors_count"]}'
    if user_parameters['rooms_count'] > 0:
        rooms_count = f'&room{user_parameters["rooms_count"]}=1'
    else:
        rooms_count = f'&room9=1'
    floor = f'&maxfloor={user_parameters["floor"]}'


    return f'{base_url}{total_area}{underground}{floors_count}{floor}{rooms_count}'

# –ü–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–æ–¥–µ –Ω–æ—Ä–º
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥</b>", parse_mode='html')

if __name__ == '__main__':
    bot.infinity_polling()
