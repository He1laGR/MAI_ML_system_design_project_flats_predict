### –ó–¥–µ—Å—å –¢–ì-–±–æ—Ç + –º–æ–¥–µ–ª—å–∫–∞
import os
from dotenv import load_dotenv
import telebot
import json
import numpy as np
import pandas as pd
from telebot import types
import pickle

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
with open('model.pkl', 'rb') as file:
    model = pickle.load(file)

load_dotenv()
token = os.getenv('TOKEN')
bot = telebot.TeleBot(token)

# /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('/help')
    btn2 = types.KeyboardButton('/params')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id,
f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ {message.from_user.username} üëã, –∑–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–ª—å—è \
–≤ –≥–æ—Ä–æ–¥–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ üåÜ, –∑–∞–¥–∞–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã \n\n<em>–ß—Ç–æ–±—ã –¥–µ—Ç–∞–ª—å–Ω–µ–π —É–∑–Ω–∞—Ç—å –æ —Ä–∞–±–æ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:</em> <b>/help</b>",
                     parse_mode = 'html',
                     reply_markup=markup)

# /help - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id,
f"–î–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n\
\t1. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å\n\
\t2. –†–∞–π–æ–Ω\n\
\t3. –ú–µ—Ç—Ä–æ\n\
\t4. –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏\n\
\t5. –£–ª–∏—Ü–∞\n\
\t6. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π\n\
\t7. –ü–ª–æ—â–∞–¥—å –∂–∏–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è\n\
\t8. –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞\n\
\t\t–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n\
\t\t8.1 –ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö\n\
\t\t8.2 –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞\n\
\t\t8.3 –°—Ç—Ä–æ–π–∫–∞\n\
\t\t8.4 –î–æ–º–∞ –¥–æ 1930-—Ö\n\
\t\t8.5 –°—Ç–∞–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞\n\
\t9. –¢–∏–ø –∞–≤—Ç–æ—Ä–∞\n\
\t\t–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n\
\t\t9.1 real_estate_agent - –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\
\t\t9.2 homeowner - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫\n\
\t\t9.3 realtor - —Ä–∏–µ–ª—Ç–æ—Ä\n\
\t\t9.4 official_representative - —É–∫ –æ—Ñ.–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å\n\
\t\t9.5 representative_developer - –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞\n\
\t\t9.6 developer - –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫\n\
\t\t9.7 unknown - –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞\n\
\t10. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç\n\
\t11. –û—Ç–¥–µ–ª–∫–∞\n\
\t\t–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n\
\t\t11.1 –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\
\t\t11.2 –ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏\n\
\t\t11.3 –ß–∏—Å—Ç–æ–≤–∞—è\n\
\t\t11.4 –ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è\n\
\t\t11.5 –ß–µ—Ä–Ω–æ–≤–∞—è\n\
\t12. –≠—Ç–∞–∂\n\
\t13. –¢–∏–ø –¥–æ–º–∞\n\
\t\t–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n\
\t\t13.1 –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\
\t\t13.2 –ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π\n\
\t\t13.3 –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π\n\
\t\t13.4 –ü–∞–Ω–µ–ª—å–Ω—ã–π\n\
\t\t13.5 –ö–∏—Ä–ø–∏—á–Ω—ã–π\n\n\
<u> p.s. –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞</u>\n\
–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /params",
parse_mode = 'html'
                    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–æ–¥–µ–ª—å
user_parameters = {
    'author_type' : '',
    'floor' : '',
    'floors_count' : '',
    'rooms_count' : '',
    'total_meters' : '',
    'year_of_construction' : '',
    'house_material_type' : '',
    'finish_type' : '',
    'living_meters' : '',
    'kitchen_meters' : '',
    'district' : '',
    'street' : '',
    'underground': '',
}

# –í–æ—Ç —Å—é–¥–∞ —Å–µ–π–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
collected_params = {}

# Start —Åollecting params
@bot.message_handler(commands=['params'])
def start_collecting_params(message):
    markup = types.InlineKeyboardMarkup()
    itembtns = [
        types.InlineKeyboardButton('–ê–≥–µ–Ω—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', callback_data='real_estate_agent'),
        types.InlineKeyboardButton('–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', callback_data='homeowner'),
        types.InlineKeyboardButton('–†–∏–µ–ª—Ç–æ—Ä', callback_data='realtor'),
        types.InlineKeyboardButton('–£–∫ –æ—Ñ.–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', callback_data='official_representative'),
        types.InlineKeyboardButton('–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞', callback_data='representative_developer'),
        types.InlineKeyboardButton('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫', callback_data='developer'),
        types.InlineKeyboardButton('–ë–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞', callback_data='unknown')
    ]
    for item in itembtns:
        markup.add(item)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def process_inline_buttons(call):
    if hasattr(call, 'data') and call.data:
        if call.data in ['real_estate_agent', 'homeowner', 'realtor', 'official_representative', 'representative_developer', 'developer', 'unknown']:
            user_parameters['author_type'] = call.data
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ (–æ—Ç 1 –¥–æ 30):")
            bot.register_next_step_handler(msg, process_floor)

        elif call.data in ['–ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö', '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–°—Ç—Ä–æ–π–∫–∞', '–î–æ–º–∞ –¥–æ 1930-—Ö', '–°—Ça–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞']:
            user_parameters['year_of_construction'] = call.data
            markup_house_material_type = types.InlineKeyboardMarkup()
            itembtns_house_material_type = [
                types.InlineKeyboardButton('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', callback_data='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                types.InlineKeyboardButton('–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π', callback_data='–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π'),
                types.InlineKeyboardButton('–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', callback_data='–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π'),
                types.InlineKeyboardButton('–ü–∞–Ω–µ–ª—å–Ω—ã–π', callback_data='–ü–∞–Ω–µ–ª—å–Ω—ã–π'),
                types.InlineKeyboardButton('–ö–∏—Ä–ø–∏—á–Ω—ã–π', callback_data='–ö–∏—Ä–ø–∏—á–Ω—ã–π')
            ]
            for item in itembtns_house_material_type:
                markup_house_material_type.add(item)
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞:", reply_markup=markup_house_material_type)

        elif call.data in ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π', '–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', '–ü–∞–Ω–µ–ª—å–Ω—ã–π', '–ö–∏—Ä–ø–∏—á–Ω—ã–π'] and user_parameters['house_material_type'] == '':
            user_parameters['house_material_type'] = call.data
            markup_finish_type = types.InlineKeyboardMarkup()
            itembtns_finish_type = [
                types.InlineKeyboardButton('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', callback_data='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                types.InlineKeyboardButton('–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', callback_data='–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏'),
                types.InlineKeyboardButton('–ß–∏—Å—Ç–æ–≤–∞—è', callback_data='–ß–∏—Å—Ç–æ–≤–∞—è'),
                types.InlineKeyboardButton('–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è', callback_data='–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è'),
                types.InlineKeyboardButton('–ß–µ—Ä–Ω–æ–≤–∞—è', callback_data='–ß–µ—Ä–Ω–æ–≤–∞—è')
            ]
            for item in itembtns_finish_type:
                markup_finish_type.add(item)
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—Ç–¥–µ–ª–∫–∏:", reply_markup=markup_finish_type)

        elif call.data in ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', '–ß–∏—Å—Ç–æ–≤–∞—è', '–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è', '–ß–µ—Ä–Ω–æ–≤–∞—è']:
            user_parameters['finish_type'] = call.data
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞:\n–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π\n\
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π\n\
–ü—É—à–∫–∏–Ω—Å–∫–∏–π\n\
–í—ã–±–æ—Ä–≥—Å–∫–∏–π\n\
–ù–µ–≤—Å–∫–∏–π\n\
–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π\n\
–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π\n\
–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π\n\
–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π\n\
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π\n\
–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π\n\
–ö—É—Ä–æ—Ä—Ç–Ω—ã–π\n\
–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π\n\
–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π\n\
–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π\n\
–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π\n\
–ö–∏—Ä–æ–≤—Å–∫–∏–π")
            bot.register_next_step_handler(msg, process_district)

# Process floor
def process_floor(message):
    try:
        floor = int(message.text)
        if floor < 1 or floor > 30:
            msg = bot.send_message(message.chat.id, "–ö–∞–∫-—Ç–æ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ (–æ—Ç 1 –¥–æ 30):")
            bot.register_next_step_handler(msg, process_floor)
        else:
            user_parameters['floor'] = floor
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 30):")
            bot.register_next_step_handler(msg, process_floor_count)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 30):")
        bot.register_next_step_handler(msg, process_floor)

# Process floor_count
def process_floor_count(message):
    try:
        floor_cnt = int(message.text)
        if floor_cnt < user_parameters['floor']:
            msg = bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —ç—Ç–∞–∂–∞")
            bot.register_next_step_handler(msg, process_floor_count)
        elif floor_cnt < 1 or floor_cnt > 30:
            msg = bot.send_message(message.chat.id, "–ó–¥–µ—Å—å —Ç–æ–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 30):")
            bot.register_next_step_handler(msg, process_floor_count)
        else:
            user_parameters['floors_count'] = floor_cnt
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–æ—Ç 0 –¥–æ 5):")
            bot.register_next_step_handler(msg, process_rooms_count)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 30):")
        bot.register_next_step_handler(msg, process_floor_count)

# Process rooms_count
def process_rooms_count(message):
    try:
        rooms_cnt = int(message.text)
        if rooms_cnt < 0 or rooms_cnt > 5:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–æ—Ç 0 –ª–æ 5):")
            bot.register_next_step_handler(msg, process_rooms_count)
        else:
            user_parameters['rooms_count'] = rooms_cnt
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å (–æ—Ç 18 –¥–æ 173):")
            bot.register_next_step_handler(msg, process_total_meters)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 0 –¥–æ 5):")
        bot.register_next_step_handler(msg, process_rooms_count)

# Process total_meters including kitchen_meters and living_meters
def process_total_meters(message):
    try:
        total_meters = int(message.text)
        if total_meters < 18 or total_meters > 173:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é  –ø–ª–æ—â–∞–¥—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–æ—Ç 18 –¥–æ 173):")
            bot.register_next_step_handler(msg, process_total_meters)
        else:
            user_parameters['total_meters'] = total_meters
            markup_period_built = types.InlineKeyboardMarkup()
            itembtns_period_built = [
                types.InlineKeyboardButton('–ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö', callback_data='–ó–∞—Å—Ç—Ä–æ–π–∫–∞ 00-—Ö –∏ 10-—Ö'),
                types.InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', callback_data='–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'),
                types.InlineKeyboardButton('–°—Ç—Ä–æ–π–∫–∞', callback_data='–°—Ç—Ä–æ–π–∫–∞'),
                types.InlineKeyboardButton('–î–æ–º–∞ –¥–æ 1930-—Ö', callback_data='–î–æ–º–∞ –¥–æ 1930-—Ö'),
                types.InlineKeyboardButton('–°—Ça–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞', callback_data='–°—Ça–ª–∏–Ω–∫–∞ | –•—Ä—É—â–µ–≤–∫–∞ | –ë—Ä–µ–∂–Ω–µ–≤–∫–∞')
            ]

            for item in itembtns_period_built:
                markup_period_built.add(item)

            if user_parameters['rooms_count'] == 0:
                user_parameters['kitchen_meters'] = round(user_parameters['total_meters'] * 0.15, 2)
                user_parameters['living_meters'] = round(user_parameters['total_meters'] * 0.65, 2)
            elif user_parameters['rooms_count'] != 0:
                user_parameters['kitchen_meters'] = round(user_parameters['total_meters'] * 0.18, 2)
                user_parameters['living_meters'] = round(user_parameters['total_meters'] * 0.48, 2)

            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞:", reply_markup=markup_period_built)

    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 18 –¥–æ 173):")
        bot.register_next_step_handler(msg, process_total_meters)

# Process district
def process_district(message):
    try:
        district = message.text.title()
        if district not in ['–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π', '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω—Å–∫–∏–π', '–í—ã–±–æ—Ä–≥—Å–∫–∏–π', '–ù–µ–≤—Å–∫–∏–π',
                            '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π', '–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π',
                            '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π', '–ö—É—Ä–æ—Ä—Ç–Ω—ã–π', '–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π', '–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π',
                            '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π', '–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π']:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–π–æ–Ω:")
            bot.register_next_step_handler(msg, process_district)
        else:
            user_parameters['district'] = district
            if district == '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 17
            elif district == '–í—ã–±–æ—Ä–≥—Å–∫–∏–π':
                user_parameters['district_rating'] = 16
            elif district == '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π':
                user_parameters['district_rating'] = 15
            elif district == '–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 14
            elif district == '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 13
            elif district == '–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π':
                user_parameters['district_rating'] = 12
            elif district == '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 11
            elif district == '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π':
                user_parameters['district_rating'] = 10
            elif district == '–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π':
                user_parameters['district_rating'] = 9
            elif district == '–ö—É—Ä–æ—Ä—Ç–Ω—ã–π':
                user_parameters['district_rating'] = 8
            elif district == '–ù–µ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 7
            elif district == '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π':
                user_parameters['district_rating'] = 6
            elif district == '–ü—É—à–∫–∏–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 5
            elif district == '–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π':
                user_parameters['district_rating'] = 4
            elif district == '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π':
                user_parameters['district_rating'] = 3
            elif district == '–ö–∏—Ä–æ–≤—Å–∫–∏–π':
                user_parameters['district_rating'] = 2
            elif district == '–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π':
                user_parameters['district_rating'] = 1
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É:")
            bot.register_next_step_handler(msg, process_street)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ")
        bot.register_next_step_handler(msg, process_district)

# Process street
def process_street(message):
    street = message.text.title()
    user_parameters['street'] = street
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–æ:")
    bot.register_next_step_handler(msg, process_underground)

metro_stations = {
    "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π": ["–ß–µ—Ä–Ω–∞—è —Ä–µ—á–∫–∞", "–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è", "–°—Ç–∞—Ä–∞—è –î–µ—Ä–µ–≤–Ω—è", "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ë–µ–≥–æ–≤–∞—è"],
    "–í—ã–±–æ—Ä–≥—Å–∫–∏–π": ["–í—ã–±–æ—Ä–≥—Å–∫–∞—è", "–õ–µ—Å–Ω–∞—è", "–£–¥–µ–ª—å–Ω–∞—è", "–û–∑–µ—Ä–∫–∏", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è", "–ü–∞—Ä–Ω–∞—Å"],
    "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π": ["–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞", "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç"],
    "–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π": ["–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è", "–õ–∞–¥–æ–∂—Å–∫–∞—è"],
    "–ù–µ–≤—Å–∫–∏–π": ["–ü—Ä–æ—Å–ø–µ–∫—Ç –ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤", "–£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ", "–ï–ª–∏–∑–∞—Ä–æ–≤—Å–∫–∞—è", "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–û–±—É—Ö–æ–≤–æ", "–†—ã–±–∞—Ü–∫–æ–µ"],
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": ["–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ", "–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è", "–ú–∞—è–∫–æ–≤—Å–∫–∞—è", "–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
                           "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è", "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ì–æ—Å—Ç–∏–Ω—ã–π –î–≤–æ—Ä"],
    "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π": ["–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è", "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è", "–ó–µ–Ω–∏—Ç", "–ì–æ—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"],
    "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π": ["–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è", "–°–µ–Ω–Ω–∞—è", "–°–∞–¥–æ–≤–∞—è", "–°–ø–∞—Å—Å–∫–∞—è", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å–∫–∞—è",
                              "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ë–∞–ª—Ç–∏–π—Å–∫–∞—è", "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è"],
    "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π": ["–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è", "–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è", "–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤", "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è"],
    "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π": ["–ö—É–ø—á–∏–Ω–æ", "–í–æ–ª–∫–æ–≤—Å–∫–∞—è", "–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª",
                           "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è", "–ë—É—Ö–∞—Ä–µ—Å—Ç—Å–∫–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –°–ª–∞–≤—ã", "–î—É–Ω–∞–π—Å–∫–∞—è"],
    "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π": ["–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ—Å–∏–ª–∞",
                         "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ó–≤—ë–∑–¥–Ω–∞—è"],
    "–ö–∏—Ä–æ–≤—Å–∫–∏–π": ["–ù–∞—Ä–≤—Å–∫–∞—è", "–ö–∏—Ä–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥", "–ê–≤—Ç–æ–≤–æ",
                        "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"],
    "–ü—É—à–∫–∏–Ω—Å–∫–∏–π" : ["–®—É—à–∞—Ä—ã"],
    "–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π" : ["–†—ã–±–∞—Ü–∫–æ–µ", "–ó–≤—ë–∑–¥–Ω–∞—è"],
    "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π" : ["–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"],
    "–ö—É—Ä–æ—Ä—Ç–Ω—ã–π" : ["–ë–µ–≥–æ–≤–∞—è"],
    "–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä—Ü–æ–≤—ã–π" : ["–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤", "–ê–≤—Ç–æ–≤–æ"]
}

# Process underground
def process_underground(message):
    try:
        district = user_parameters['district']
        underground = message.text
        allowed_stations = metro_stations[district]

        if underground in allowed_stations:
            user_parameters['underground'] = underground
            msg = bot.send_message(message.chat.id, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Ä–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å!\n –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /predict")
            save_parameters()
        else:
            msg = bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞: {', '.join(allowed_stations)}")
            bot.register_next_step_handler(msg, process_underground)

    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ")
        bot.register_next_step_handler(msg, process_underground)

@bot.message_handler(commands=['predict'])
def prediction(message):
    try:
        user_parameters = load_user_parameters()
        input_data = pd.DataFrame(user_parameters, index=[0])
        predicted_price = np.exp(model.predict(input_data))
        lower_border = int(predicted_price - (predicted_price * 5 / 100))
        upper_border = int(predicted_price + (predicted_price * 5 / 100))
        formatted_lower_border = "{:,}".format(lower_border).replace(",", ".")
        formatted_upper_border = "{:,}".format(upper_border).replace(",", ".")
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {formatted_lower_border}‚ÇΩ –¥–æ {formatted_upper_border}‚ÇΩ")
    except:
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        bot.register_next_step_handler(msg, process_inline_buttons)

# –°—ç–π–≤–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ json
def save_parameters():
    global user_parameters
    user_parameters.update(collected_params)

    with open('user_parameters.json', 'w', encoding='utf-8') as file:
        json.dump(user_parameters, file, ensure_ascii=False)

def load_user_parameters():
    with open('user_parameters.json', 'r', encoding='utf-8') as file:
        user_parameters = json.load(file)
    return user_parameters
'''
–§—É–Ω–∫—Ü–∏—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—á–∫—É –≤ —Ü–∏–∞–Ω
def generate_cian_url(user_parameters):
    # –ó–¥–µ—Å—å –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ –¶–ò–ê–ù —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return "https://www.cian.ru/search/?parameters=your_parameters_here"'''

# –ü–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–æ–¥–µ –Ω–æ—Ä–º
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥")

## –û–±—Ä–∞–±–æ—Ç–∞—Ç—å exit, –¥–ª—è —Å–ª–µ–¥.–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è –∂–µ, –≤—Ä–æ–¥–µ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
bot.infinity_polling()

"""
def main():
    start_message(message)
    bot.infinity_poling()

if __name__ == '__main__':
    main()
"""
